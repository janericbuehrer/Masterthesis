##################################################################################
#
# RevBayes Analysis: Bayesian inference of diversification rates under a
#                    cladogenetic character-dependent birth-death model (also
#                    called Cladogenetic State Speciation and Extinction or
#                    ClaSSE). In this example we use ClaSSE to model biogeographic
#                    range evolution similar to the DEC models. Unlike the DEC
#                    model, ClaSSE accounts for speciation events unobserved due
#                    to extinction or incomplete sampling.
#
# Model:             Incomplete Model, only the three biomes are modelled without
#                    vegetation formations.
#
# Assumptions:       Here I relaxed the assumption that the presence in t and ta but 
#					 not in bs is impossible,
#                    (e.g. 7 = 101 = both ta & t).
#                    Moreover, I stick to the assumption that there are no   
#                    "global mass extinctions",
#					 therefore the species must occur in a single biome to go extinct.
#
##################################################################################

# load tensor_phylo from the docker's root directory
loadPlugin("TensorPhylo", "/tensorphylo/build/installer/lib")


# FILESYSTEM
fp          = "/home/buehrerj/gentiana/"
dat_fp      = fp + "data/"
out_fp      = fp + "output/biome/m8/"
bg_fn       = dat_fp + "Gent_biome_0.csv"
phy_fn      = dat_fp + "Gentiana_cor.nex"


#######################
# Reading in the Data #
#######################

# Get the tree ([1] is there to say that we are only taking the first tree of the file, as the function is assuming that it is a vector of trees)
observed_phylogeny <- readTrees(phy_fn)[1]
root_age <- observed_phylogeny.rootAge()

# Get the taxa in the tree. We'll need this later on.
taxa = observed_phylogeny.taxa()

# Read biogeographic range (biome) data. The areas are represented as the
# following character states:

########## character states ####################
# all possible combinations of 3 states

#state | bits | state_describtion ##############
# 0 = 001 = temperate/montane only (tm)
# 1 = 010 = boreal/subalpine only (bs)
# 2 = 011 = both bs & t
# 3 = 100 = tundra/alpine only (ta)
# 4 = 101 = both ta & t
# 5 = 110 = both ta & bs
# 6 = 111 = all ta & bs & t
################################################
#Read in
data_biogeo = readCharacterDataDelimited(bg_fn, stateLabels="7", type="NaturalNumbers", delimiter=";", header=TRUE)

NUM_states = 7
NUM_character = 1

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

###############################
# Set up the extinction rates #
###############################

# We are going to draw both anagenetic transition rates
# and diversification rates from a lognormal distribution.
# The mean of the prior distribution will be the expected net
# diversification rate, and the SD will be 1.0 so the 95%
# prior interval ranges well over 2 orders of magnitude.
num_species <- 341 # approximate total number of Gentiana
rate_mean <- ln( ln(num_species/2.0) / observed_phylogeny.rootAge() ) 
rate_sd <- 1.0

# The extinction rates will be stored in a vector where each element represents
# the extinction rate for the corresponding character state.
# I chose NOT to allow a lineage to go extinct in multiple biomes
# at the same time (like a global extinction event). I restrict the
# model so that a lineage can only go extinct if it's range is limited to one area.
# As an alternative, one could comment out the last 3 rows.

extinction_rates[1] ~ dnLognormal(rate_mean, rate_sd) # extinction when the lineage is in t (state 1)
extinction_rates[2] ~ dnLognormal(rate_mean, rate_sd) # extinction when the lineage is in bs (state 2)
extinction_rates[4] ~ dnLognormal(rate_mean, rate_sd) # extinction when the lineage is in ta (state 3)

extinction_rates[3] <- 0.0  # 0.0 extinction when the lineage is in both bs & t (state 3) 
extinction_rates[5] <- 0.0  # 0.0 ...same applies here
extinction_rates[6] <- 0.0 
extinction_rates[7] <- 0.0



# Note Rev vectors are indexed starting with 1, yet our character states start
# at 0. So extinction_rate[1] will represent the extinction rate for character
# state 0.

# add MCMC moves for each extinction rate
moves.append( mvSlide( extinction_rates[1], weight=3 ) )
moves.append( mvSlide( extinction_rates[2], weight=3 ) )
moves.append( mvSlide( extinction_rates[4], weight=3 ) )

# Let's also create a deterministic variable to monitor the overall extinction rate
total_extinction := sum(extinction_rates)


################################################
# Set up the anagenetic transition rate matrix #
################################################

# First, let's create the rates of anagenetic dispersal:

biome_shift_0_2 ~ dnLognormal(rate_mean, rate_sd) # disperse from t to bs 001 -> 011
biome_shift_0_4 ~ dnLognormal(rate_mean, rate_sd) # disperse from t to ta 010 -> 101
biome_shift_1_2 ~ dnLognormal(rate_mean, rate_sd) # ...
biome_shift_1_5 ~ dnLognormal(rate_mean, rate_sd)
biome_shift_2_6 ~ dnLognormal(rate_mean, rate_sd)
biome_shift_3_4 ~ dnLognormal(rate_mean, rate_sd)
biome_shift_3_5 ~ dnLognormal(rate_mean, rate_sd)
biome_shift_4_6 ~ dnLognormal(rate_mean, rate_sd)
biome_shift_5_6 ~ dnLognormal(rate_mean, rate_sd)

# assumptions: 
# (1) only one biome transition per anagenetic dispersal event.

# and add MCMC moves for each anagenetic dispersal rate
moves.append( mvSlide( biome_shift_0_2, weight=2 ) )
moves.append( mvSlide( biome_shift_0_4, weight=2 ) )
moves.append( mvSlide( biome_shift_1_2, weight=2 ) )
moves.append( mvSlide( biome_shift_1_5, weight=2 ) )
moves.append( mvSlide( biome_shift_2_6, weight=2 ) )
moves.append( mvSlide( biome_shift_3_4, weight=2 ) )
moves.append( mvSlide( biome_shift_3_5, weight=2 ) )
moves.append( mvSlide( biome_shift_4_6, weight=2 ) )
moves.append( mvSlide( biome_shift_5_6, weight=2 ) )

# The anagenetic transitions will be stored in a 7 by 7
# instantaneous rate matrix. We will construct this by
# first creating a vector of vectors. Let's begin by
# initalizing all rates to 0.0:
for (i in 1:7) {
    for (j in 1:7) {
        r[i][j] <- 0.0
    }
}

# Now we can populate non-zero rates into the anagenetic transition rate matrix:

r[1][3] := biome_shift_0_2 
r[1][5] := biome_shift_0_4

r[2][3] := biome_shift_1_2 
r[2][6] := biome_shift_1_5 

r[3][7] := biome_shift_2_6 

r[4][5] := biome_shift_3_4 
r[4][6] := biome_shift_3_5 

r[5][7] := biome_shift_4_6 
r[6][7] := biome_shift_5_6

# add extinction rates

r[3][2] := extinction_rates[1] 
r[3][1] := extinction_rates[2] 
r[5][4] := extinction_rates[1] 
r[5][1] := extinction_rates[4] 
r[6][4] := extinction_rates[2] 
r[6][2] := extinction_rates[4] 
r[7][6] := extinction_rates[1] 
r[7][5] := extinction_rates[2] 
r[7][3] := extinction_rates[4]


total_biome_shifts := sum( [ r[1][3], r[1][5], r[2][3], r[2][6], r[3][7], r[4][5], r[4][6], r[5][7], r[6][7] ] )
# Now we pass our vector of vectors into the fnFreeK function to create
# the instaneous rate matrix.
ana_rate_matrix := fnFreeK(r, rescaled=false)

ana_rate_matrix

##################################################
# Set up the cladogenetic speciation rate matrix #
##################################################

# Here we need to define each cladogenetic event type in the form
# [ancestor_state, daughter1_state, daughter2_state]
# and assign each cladogenetic event type a corresponding
# speciation rate.

# The first type of cladogenetic event we'll specify is widespread sympatry.
# Widespread sympatric cladogenesis is where the biogeographic range does
# not change; that is the daughter lineages inherit the same range as
# the ancestor. In this example we are not going to allow the change
# 11 -> 11, 11, as it seems biologically implausible. However if you wanted
# you could add this to your model.

# We'll set for each biome copying event (conserving their ancestral biome at speciation) a individual speciation rate:

speciation_conserved_tm ~ dnLognormal(rate_mean, rate_sd)
speciation_conserved_bs ~ dnLognormal(rate_mean, rate_sd)
speciation_conserved_ta ~ dnLognormal(rate_mean, rate_sd)

moves.append( mvSlide( speciation_conserved_tm, weight=3 ) )
moves.append( mvSlide( speciation_conserved_bs, weight=3 ) )
moves.append( mvSlide( speciation_conserved_ta, weight=4 ) )


# Define the widespread sympatric cladogenetic events:
clado_events[1] = [0, 0, 0] # 001 -> 001, 001
clado_events[2] = [1, 1, 1] # 010 -> 010, 010
clado_events[3] = [3, 3, 3] # 100 -> 100, 100
# and assign each the same speciation rate:
speciation_rates[1] := speciation_conserved_tm
speciation_rates[2] := speciation_conserved_bs
speciation_rates[3] := speciation_conserved_ta


# Subset sympatry is where one daughter lineage inherits the full
# ancestral range but the other lineage inherits only a single region.
# For the purpose of biome conservatism, I call it subset specialisation.
speciation_within_biome ~ dnLognormal(rate_mean, rate_sd)
moves.append( mvSlide( speciation_within_biome, weight=4 ) )

# Define the subset sympatry events and assign each a speciation rate:

clado_events[4] = [2,0,2] # 011 -> 001, 011
clado_events[5] = [2,2,0] # 011 -> 011, 001
clado_events[6] = [2,1,2] # 011 -> 010, 011
clado_events[7] = [2,2,1] # 011 -> 011, 010
clado_events[8] = [4,0,4] # ...
clado_events[9] = [4,4,0] 
clado_events[10] = [4,3,4] 
clado_events[11] = [4,4,3] 
clado_events[12] = [5,1,5] 
clado_events[13] = [5,5,1] 
clado_events[14] = [5,3,5] 
clado_events[15] = [5,5,3] 
clado_events[16] = [6,0,6] # 111 -> 001, 111
clado_events[17] = [6,6,0] 
clado_events[18] = [6,1,6] 
clado_events[19] = [6,6,1] 
clado_events[20] = [6,3,6] 
clado_events[21] = [6,6,3]

## not sure if this is subset sympatry, as MORE than a SINGLE range is passed over from the ancestor to the daughter:
#clado_events[22] = [6,2,6]
#clado_events[23] = [6,6,2]
#clado_events[24] = [6,4,6] 
#clado_events[25] = [6,6,4] 
#clado_events[26] = [6,5,6] 

for (i in 4:21) {
    speciation_rates[i] := speciation_within_biome/18
}

# ALLOPATRIC CLADOGENISIS ###################################
# Allopatric cladogenesis is when the two daughter lineages
# split the ancestral range. In my biome system, specialisation 
speciation_between_biome ~ dnLognormal(rate_mean, rate_sd)
moves.append( mvSlide( speciation_between_biome, weight=2 ) )

# Define the allopatric events:

clado_events[22] = [2,0,1] # 011 -> 001, 010
clado_events[23] = [2,1,0] # ...
clado_events[24] = [4,0,3] 
clado_events[25] = [4,3,0] 
clado_events[26] = [5,1,3] 
clado_events[27] = [5,3,1] 
clado_events[28] = [6,0,5] 
clado_events[29] = [6,1,4] 
clado_events[30] = [6,2,3] 
clado_events[31] = [6,3,2] 
clado_events[32] = [6,4,1] 
clado_events[33] = [6,5,0] 

for (i in 22:33) {
    speciation_rates[i] := speciation_between_biome/12
}


# Now let's create a deterministic variable to monitor the overall speciation rate

total_sp_strict_conservatism := sum( [ speciation_rates[1], speciation_rates[2], speciation_rates[3] ] )

total_sp_relaxed_conservatism := sum( [ speciation_rates[4], speciation_rates[5], speciation_rates[6], speciation_rates[7], speciation_rates[8], 
    speciation_rates[9], speciation_rates[10], speciation_rates[11], speciation_rates[12], speciation_rates[13], speciation_rates[14], speciation_rates[15], 
    speciation_rates[16], speciation_rates[17], speciation_rates[18], speciation_rates[19], speciation_rates[20], speciation_rates[21], speciation_rates[22], speciation_rates[23], 
    speciation_rates[24], speciation_rates[25], speciation_rates[26], speciation_rates[27], speciation_rates[28], speciation_rates[29], speciation_rates[30], speciation_rates[31], speciation_rates[32], speciation_rates[33] 
    ] )

total_speciation := sum(speciation_rates)

# Finally, we construct the cladogenetic speciation rate
# matrix from the cladogenetic event types and the speciation rates
clado_matrix := fnCladogeneticSpeciationRateMatrix(clado_events, speciation_rates, 7)

# let's view the cladogenetic matrix to see if we have set it up correctly:
print("clado_matrix")
clado_matrix

# As we have specified the model, we did not allow cladogenetic long
# distance (jump) dispersal, for example 001 -> 001, 010


#########################################################################
# Set up the cladogenetic character state dependent birth death process #
#########################################################################

# For simplicity we will fix the root frequences to be equal except for the null state
# which has probability of 0.
## root_frequencies <- simplex([0, 1, 1, 1, 1, 1, 1, 1])

## Alternatively, use a Dirichlet distribution as prior for the root state:
root_frequencies ~ dnDirichlet(rep(1, NUM_states))
moves.append( mvBetaSimplex(root_frequencies,tune=true,weight=2) )
moves.append( mvDirichletSimplex(root_frequencies,tune=true,weight=2) )

# rho is the probability of sampling species at the present
rho <- observed_phylogeny.ntips()/num_species


lambda := clado_matrix.getSpeciationRateSumPerState()

print("lambda")
lambda

omega := clado_matrix.getCladogeneticProbabilityMatrix()



#omega := fnCladogeneticProbabilityMatrix(clado_events, speciation_rates, 7)

 

classe ~ dnGLHBDSP(

   rootAge   = root_age,

   lambda    = lambda,

   mu        = extinction_rates,

   eta       = ana_rate_matrix,

   omega     = omega,

   pi        = root_frequencies,

   condition = "time",

   taxa      = taxa,

   nStates   = NUM_states,

   rho       = rho,

   zeroIndex = true)


# clamp the model with the observed data
classe.clamp( observed_phylogeny )
classe.clampCharData( data_biogeo )


#############
# The Model #
#############

# workspace model wrapper
mymodel = model(classe)

# set up the monitors that will output parameter values to file and screen

monitors.append( mnModel(filename= out_fp + "biome_model_8.log", printgen=1) )

# MAPS
monitors.append( mnStochasticCharacterMap(glhbdsp = classe, filename=out_fp +"biome_stoch_8.log", printgen=1) ) 
monitors.append( mnStochasticCharacterMap(glhbdsp = classe, filename=out_fp +"biome_stoch_8_json.log", printgen=1, use_json = true) ) 

# ANC states reconstruction
monitors.append( mnJointConditionalAncestralState(tree=observed_phylogeny, glhbdsp= classe, 
    type="NaturalNumbers", printgen=1, withTips=true, withStartStates=true, filename= out_fp +"biome_states_8.log") )

monitors.append( mnScreen(printgen=500, speciation_conserved_bs, speciation_conserved_ta, speciation_conserved_tm, speciation_within_biome, speciation_between_biome, extinction_rates) )


################
# The Analysis #
################

# workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves)

print("mymcmc done")


# run the MCMC
burn_in <- 2000
gen <- 10000
tuning <- 50
mymcmc.burnin(generations=burn_in,tuningInterval=tuning)
mymcmc.run(generations=gen)


##############################
# Summarize ancestral states #
##############################

f_burn = 0.25 #default
x_stoch = readAncestralStateTrace(file=out_fp+"biome_stoch_8.log")
x_states = readAncestralStateTrace(file=out_fp+"biome_states_8.log")


state_tree = ancestralStateTree(tree=observed_phylogeny, 
                                ancestral_state_trace_vector=x_states, 
                                include_start_states=true, 
                                file= out_fp + "states_results_8.tree", 
                                nStates = NUM_states, 
                                burnin=f_burn, 
                                summary_statistic="MAP", 
                                site=1)

writeNexus(state_tree,filename=out_fp+"state_biome_8.tre")


stoch_tree = characterMapTree(tree = observed_phylogeny, 
                ancestral_state_trace_vector=x_stoch, 
                character_file=out_fp + "biome_character_8.tree", 
                posterior_file=out_fp+"biome_MAP_8.tree",
                shift_prob_file=out_fp+"biome_shift_prob_8.tree",  
                reconstruction="marginal")

writeNexus(stoch_tree,filename=out_fp+"stoch_biome_8.tre")

# lists all events in a table
#summarizeCharacterMaps(x_stoch, classe , file=out_fp+"events_8.tsv", sep = ",", burnin=f_burn)

print("DONE")

q()