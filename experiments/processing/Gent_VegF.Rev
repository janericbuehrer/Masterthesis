# load tensor_phylo from the docker's root directory
loadPlugin("TensorPhylo", "/tensorphylo/build/installer/lib")

# FILESYSTEM
fp          = "/home/buehrerj/gentiana/"
dat_fp      = fp + "data/"
out_fp      = fp + "output/vegf/m6/"
bg_fn       = dat_fp + "Gent_VegF_noNA_data_012.csv"
phy_fn      = dat_fp + "Gentiana_cor.nex"

#######################
# Reading in the Data #
#######################

# Get the tree ([1] is there to say that we are only taking the first tree of the file, as the function is assuming that it is a vector of trees)
observed_phylogeny <- readTrees(phy_fn)[1]
root_age <- observed_phylogeny.rootAge()

# Get the taxa in the tree. We'll need this later on.
taxa = observed_phylogeny.taxa()

# Read biogeographic range (biome) data. The areas are represented as the
# following character states:

########## character states ####################
# all possible combinations of 3 states

#state | bits | state_describtion ##############
# 0 = 01 = closed
# 1 = 10 = open
# 2 = 11 = both c and o
################################################

#Read in
data_biogeo = readCharacterDataDelimited(bg_fn, stateLabels="3", type="NaturalNumbers", delimiter=";", header=TRUE)

NUM_states = 3
NUM_character = 1

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


###############################
# Set up the extinction rates #
###############################

num_species <- 341 # approximate total number of Gentiana
rate_mean <- ln( ln(num_species/2.0) / root_age )
rate_sd <- 1.0


extinction_rates[1] ~ dnLognormal(rate_mean, rate_sd) 
extinction_rates[2] ~ dnLognormal(rate_mean, rate_sd) 
extinction_rates[3] <- 0.0  # 0.0 extinction when the lineage is in both vegetation formation is not allowed



# Note Rev vectors are indexed starting with 1, yet our character states start
# at 0. So extinction_rate[1] will represent the extinction rate for character
# state 0.

# add MCMC moves for each extinction rate
moves.append( mvSlide( extinction_rates[1], weight=5 ) )
moves.append( mvSlide( extinction_rates[2], weight=4 ) )

# moves.append( mvSlide( extinction_rates[4], weight=2 ) ) # assumption was made that multiple occupation of biomes can not lead to (mass) extinction


# Let's also create a deterministic variable to monitor the overall extinction rate
total_extinction := sum(extinction_rates)


################################################
# Set up the anagenetic transition rate matrix #
################################################

# First, let's create the rates of anagenetic dispersal:
biome_shift_02 ~ dnLognormal(rate_mean, rate_sd) # disperse from c to o 01 -> 11
biome_shift_12 ~ dnLognormal(rate_mean, rate_sd)

# and add MCMC moves for each anagenetic dispersal rate
moves.append( mvSlide( biome_shift_02, weight=4 ) )
moves.append( mvSlide( biome_shift_12, weight=4 ) )

# The anagenetic transitions will be stored in a 4 by 4
# instantaneous rate matrix. We will construct this by
# first creating a vector of vectors. Let's begin by
# initalizing all rates to 0.0:
for (i in 1:3) {
    for (j in 1:3) {
        r[i][j] <- 0.0
    }
}

# Now we can populate non-zero rates into the anagenetic transition rate matrix:
r[1][3] := biome_shift_02
r[2][3] := biome_shift_12

r[3][1] := extinction_rates[2]
r[3][2] := extinction_rates[1]

total_shifts := sum([r[1][3], r[2][3]])

# Now we pass our vector of vectors into the fnFreeK function to create
# the instaneous rate matrix.
ana_rate_matrix := fnFreeK(r, rescaled=false)
ana_rate_matrix

##################################################
# Set up the cladogenetic speciation rate matrix #
##################################################

# We'll set for each biome copying event (conserving their ancestral biome at speciation) a individual speciation rate:
speciation_conserved_closed ~ dnLognormal(rate_mean, rate_sd)
speciation_conserved_open ~ dnLognormal(rate_mean, rate_sd)

moves.append( mvSlide( speciation_conserved_closed, weight=4 ) )
moves.append( mvSlide( speciation_conserved_open, weight=2 ) )

# WIDE SYMPATRY ######################################
# Define the widespread sympatric cladogenetic events:
clado_events[1] = [0, 0, 0] # 01 -> 01, 01
clado_events[2] = [1, 1, 1] 

# and assign each the same speciation rate:
speciation_rates[1] := speciation_conserved_closed
speciation_rates[2] := speciation_conserved_open


# SUBSET SYMPATRY ###############################
# is where one daughter lineage inherits the full
# ancestral range but the other lineage inherits only a single region.
speciation_within_biome_closed ~ dnLognormal(rate_mean, rate_sd)
speciation_within_biome_open ~ dnLognormal(rate_mean, rate_sd)
moves.append( mvSlide( speciation_within_biome_closed, weight=4 ) )
moves.append( mvSlide( speciation_within_biome_open, weight=4 ) )

# Define the subset sympatry events and assign each a speciation rate:
clado_events[3] = [2, 2, 0] # 11 -> 11, 01
clado_events[4] = [2, 0, 2] # 11 -> 10, 11
clado_events[5] = [2, 2, 1] # 11 -> 11, 10
clado_events[6] = [2, 1, 2] # 11 -> 10, 11
speciation_rates[3] := speciation_within_biome_closed/2
speciation_rates[4] := speciation_within_biome_closed/2
speciation_rates[5] := speciation_within_biome_open/2
speciation_rates[6] := speciation_within_biome_open/2


# ALLOPATRIC CLADOGENISIS #################################
# Allopatric cladogenesis is when the two daughter lineages
# split the ancestral range:
speciation_between_biome ~ dnLognormal(rate_mean, rate_sd)
moves.append( mvSlide( speciation_between_biome, weight=4 ) )

# Define the allopatric events:
clado_events[7] = [2, 0, 1] # 11 -> 01, 10
clado_events[8] = [2, 1, 0] # 11 -> 10, 01
speciation_rates[7] := speciation_between_biome/2
speciation_rates[8] := speciation_between_biome/2

# Now let's create a deterministic variable to monitor the overall speciation rate

total_sp_strict_conservatism := sum( [ speciation_rates[1], speciation_rates[2] ] )

total_sp_relaxed_conservatism := sum( [ speciation_rates[3], speciation_rates[4], 
    speciation_rates[5], speciation_rates[6], speciation_rates[7], speciation_rates[8] 
    ] )

total_speciation := sum(speciation_rates)

# Finally, we construct the cladogenetic speciation rate
# matrix from the cladogenetic event types and the speciation rates
clado_matrix := fnCladogeneticSpeciationRateMatrix(clado_events, speciation_rates, 3)

# let's view the cladogenetic matrix to see if we have set it up correctly:
clado_matrix

# As we have specified the model, we did not allow cladogenetic long
# distance (jump) dispersal, for example 001 -> 001, 010


#########################################################################
# Set up the cladogenetic character state dependent birth death process #
#########################################################################

# For simplicity we will fix the root frequences to be equal except for the null state
# which has probability of 0.
## root_frequencies <- simplex([1, 1, 1])

## Alternatively, use a Dirichlet distribution as prior for the root state:
root_frequencies ~ dnDirichlet(rep(1, NUM_states))
moves.append( mvBetaSimplex(root_frequencies,tune=true,weight=2) )
moves.append( mvDirichletSimplex(root_frequencies,tune=true,weight=2) )

# rho is the probability of sampling species at the present
rho <- observed_phylogeny.ntips()/num_species


lambda := clado_matrix.getSpeciationRateSumPerState()

print("lambda")
lambda

omega := clado_matrix.getCladogeneticProbabilityMatrix()

print("omega")
omega

#omega := fnCladogeneticProbabilityMatrix(clado_events, speciation_rates, 3)

 

classe ~ dnGLHBDSP(

   rootAge   = root_age,

   lambda    = lambda,

   mu        = extinction_rates,

   eta       = ana_rate_matrix,

   omega     = omega,

   pi        = root_frequencies,

   condition = "time",

   taxa      = taxa,

   nStates   = NUM_states,

   rho       = rho,

   zeroIndex = true)

# clamp the model with the observed data
classe.clamp( observed_phylogeny )
classe.clampCharData( data_biogeo )


#############
# The Model #
#############

# workspace model wrapper
mymodel = model(classe)

# set up the monitors that will output parameter values to file and screen

monitors.append( mnModel(filename=out_fp + "model.log", printgen=1) )

# stochastic character MAPS
monitors.append( mnStochasticCharacterMap(glhbdsp = classe, filename=out_fp + "stoch.log", printgen=1) ) 
monitors.append( mnStochasticCharacterMap(glhbdsp = classe, filename=out_fp + "stoch_json.log", printgen=1, use_json=true) )
# ANC states reconstruction
monitors.append( mnJointConditionalAncestralState(tree=observed_phylogeny, glhbdsp=classe, type="NaturalNumbers", printgen=1, withTips=true, withStartStates=true, filename=out_fp + "states.log") )

monitors.append( mnScreen(printgen=500, speciation_conserved_closed, speciation_conserved_open, speciation_within_biome_closed, speciation_within_biome_open, speciation_between_biome, extinction_rates) )

print("chapter >the model< done")

################
# The Analysis #
################

# workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves)

print("mymcmc done")


# run the MCMC
burn_in <- 2000
gen <- 10000
tuning <- 50
mymcmc.burnin(generations=burn_in,tuningInterval=tuning)
mymcmc.run(generations=gen)


##############################
# Summarize ancestral states #
##############################

f_burn = 0.25 #default
x_stoch = readAncestralStateTrace(file=out_fp+"stoch.log")
x_states = readAncestralStateTrace(file=out_fp+"states.log")

state_tree = ancestralStateTree(tree=observed_phylogeny, 
                                ancestral_state_trace_vector=x_states, 
                                include_start_states=true, 
                                file= out_fp + "states_results.tree", 
                                nStates = NUM_states, 
                                burnin=f_burn, 
                                summary_statistic="MAP", 
                                site=1)

writeNexus(state_tree,filename=out_fp+"state_vegF.tre")


stoch_tree = characterMapTree(tree = observed_phylogeny, 
                    ancestral_state_trace_vector=x_stoch, 
                    character_file=out_fp + "character.tree", 
                    posterior_file=out_fp+"MAP.tree",
                    shift_prob_file=out_fp+"biome_shift_prob.tree",  
                    reconstruction="marginal")

writeNexus(stoch_tree,filename=out_fp+"stoch_vegF.tre")

# extras not sure for what....
#summarizeCharacterMaps(x_stoch, classe , file=out_fp+"events.tsv", delimiter = "," , burnin=f_burn)


print("DONE")

q()
